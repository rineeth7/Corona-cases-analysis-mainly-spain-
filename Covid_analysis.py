# -*- coding: utf-8 -*-
"""Major Project Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ajg39_NbXCmcePF0gPtIIr4w1E2wf-F7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip
from pandas_profiling import ProfileReport

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir("/content/drive/My Drive/Python - SmartKnower(mine)/")
!ls

!jupyter nbconvert --to html 'Major Project Final.ipynb'

df = pd.read_csv('/content/drive/My Drive/Python - SmartKnower(mine)/latestReport.csv')
df

Spain_CSV = df[df['location']=='Spain']
Spain_CSV

profile = ProfileReport(Spain_CSV,title = 'Pandas Profiling Report',explorative = True)
profile

Spain_CSV.plot('date', 'new_cases', figsize=(15,8))
plt.xlabel('Months')
plt.ylabel('Cases')
plt.title('Daily cases in Spain')
plt.show()

############ Last Row contains Zero
Spain_CSV.reset_index(inplace=True,drop=True)
Spain_CSV = Spain_CSV[:-1]
Spain_CSV

# Handling the missing values(0's in between) in new cases
c = 0
for i in range(70,263):
  if Spain_CSV.iloc[i,5] <= 0:
    if c > 0:
      c = c + 1
    else:
      c = 1
  else:
    if c > 0:
      c = c + 1
      Val = Spain_CSV.iloc[i,5]
      for j in range(i-c+1,i+1):
        Spain_CSV.iloc[j,5] = Val/c
      c = 0
    else:
      c = 0

# Handling the missing values(0's and -ve's in between) in new cases
c = 0
for i in range(70,263):
  if Spain_CSV.iloc[i,8] <= 0:
    if c > 0:
      c = c + 1
    else:
      c = 1
  else:
    if c > 0:
      c = c + 1
      Val = Spain_CSV.iloc[i,8]
      for j in range(i-c+1,i+1):
        Spain_CSV.iloc[j,8] = Val/c
      c = 0
    else:
      c = 0

plt.figure(figsize=(15,8))
plt.plot(Spain_CSV['date'],Spain_CSV['new_cases'].rolling(window = 7).mean(),label = 'New Cases')
plt.plot(Spain_CSV['date'],Spain_CSV['new_deaths'].rolling(window = 6).mean(),label = 'New Deaths')
new_xticks=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct']
locs = [5,32,61,92,122,153,183,214,244,274]
plt.xlabel('Months')
plt.ylabel('Cases')
plt.title('Daily cases in Spain')
plt.xticks(locs,new_xticks)
plt.legend()
plt.show()

##### Top 10 worst hit Countries
count = df.groupby('location')[['total_cases','total_deaths']].max()
count.reset_index(inplace=True)
count.drop(208,axis=0,inplace=True)
count.reset_index(inplace=True)
print("Top 10 worst hit Countries")
count[['location','total_cases']].sort_values(by=['total_cases'], axis=0, ascending=False).head(10)

import json
from google.colab import files
uploaded = files.upload()
import io
file_name = "world_countries.json"
io.StringIO(uploaded[file_name].decode("utf-8"))
world_geo = json.loads(uploaded[file_name].decode("utf-8"))

##### Choropleth Map for Worldwide total cases
import folium

threshold_scale = np.linspace(count['total_cases'].min(),count['total_cases'].max(),6, dtype=int)
threshold_scale = threshold_scale.tolist() 
threshold_scale[-1] = threshold_scale[-1] + 1 

world_map = folium.Map(location=[0,0], zoom_start=2)
world_map.choropleth(
    geo_data=world_geo,
    data=count,
    columns=['location', 'total_cases'],
    key_on='feature.properties.name',
    threshold_scale=threshold_scale,
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Corona hit Countries',
    reset=True
)

world_map

# 10 Countries with highest active cases
dfc = pd.read_excel('/content/drive/My Drive/Python - SmartKnower(mine)/Book 2.xlsx')
dfc = dfc[['location','Recovered Cases']]
dfc.dropna(axis=0,inplace=True)
dfc['Recovered Cases'] = dfc['Recovered Cases']*1.04
cf = count.merge(dfc,on='location')
#cf.dropna(axis=0,inplace=True)
cf['Recovered Cases'] = cf['Recovered Cases'].astype(int)
cf['recovery rate'] = cf['Recovered Cases']/cf['total_cases']
cf['active_cases'] = cf['total_cases'] - cf['Recovered Cases']
#cf.info()
for ix,i in enumerate(cf['recovery rate']):
  if i>1:
    cf.iloc[ix,5] = 0.95
  elif i==1:
    cf.iloc[ix,5] = 0.99
  elif i==0:
    cf.iloc[ix,5] = 0.5
cf['recovery rate'].max()
print('10 Countries with highest active cases')
cf[['location','active_cases']].sort_values(by=['active_cases'], axis=0, ascending=False).head(10)

print('10 Countries with highest Recovery Rate')
cf[['location','recovery rate']].sort_values(by=['recovery rate'], axis=0, ascending=False).head(10)

# Choropleth Map for recovered cases

import folium

threshold_scale = np.linspace(cf['recovery rate'].min(),cf['recovery rate'].max(),6, dtype=float)
threshold_scale = threshold_scale.tolist() 
threshold_scale[-1] = threshold_scale[-1] + 0.0001 

world_map = folium.Map(location=[0,0], zoom_start=2)
world_map.choropleth(
    geo_data=world_geo,
    data=cf,
    columns=['location', 'recovery rate'],
    key_on='feature.properties.name',
    threshold_scale=threshold_scale,
    fill_color='YlGn', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Recovery Rate in Corona hit Countries',
    reset=True
)

world_map

# As we can see, top 4 countries(US, India, Brazil and Russia contributed most of the cases)
df_top6 = df.groupby('location')[['total_cases']].max()
df_top6.reset_index(inplace=True)
df_top6.sort_values(by=['total_cases'], axis=0, ascending=False,inplace=True)
df_top6 = df_top6.head(5)
df_top6
data6 = df.loc[df['location'].isin(df_top6['location'].values)]
subp = df[df['location']=='World']
subp.rename(columns={'new_cases':'World'},inplace=True)
for i in range(2,6):
  subp[df_top6.iloc[i-1,0]] = data6[data6['location']==df_top6.iloc[i-1,0]]['new_cases'].values
subp.reset_index(inplace=True)
subp['World'].plot(kind='area',stacked=False,figsize=(13, 6))
locs = [0,32,61,92,122,153,183,214,244]
new_xticks=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep']
plt.xlabel('Months')
plt.ylabel('Cases')
plt.xticks(locs,new_xticks)
plt.title('Daily cases Worldwide')
subp[df_top6.iloc[1:6,0]].plot(kind='area',stacked=True,alpha=1,figsize=(13, 6))
plt.xticks(locs,new_xticks)
plt.xlabel('Months')
plt.ylabel('Cases')
plt.title('Daily cases in Top 4 countries')

Spain_CSV['date'] = pd.to_datetime(Spain_CSV['date'])
Spain_CSV['date'][0]

Cases = Spain_CSV[['date','new_cases']]
Cases

Cases.rename(columns = {'date':'ds','new_cases':'y'},inplace = True)
Cases

import fbprophet
op = fbprophet.Prophet(weekly_seasonality = True,daily_seasonality=True)
op.add_seasonality(name='monthly', period=180, fourier_order=5)
op.fit(Cases)

# Make a future possible prediction for 1 month
forecast = op.make_future_dataframe(periods=30)
forecast = op.predict(forecast)

op.plot(forecast,xlabel='Dates',ylabel = 'Cases',figsize=(15,8))
plt.title('Cases Prediction');

op.plot_components(forecast)

from fbprophet.diagnostics import cross_validation
cv = cross_validation(op,initial = '150 days',period ='46 days', horizon = '91 days')
from fbprophet.diagnostics import performance_metrics
cv_per = performance_metrics(cv)
cv_per.head(20)

